cmake_policy(SET CMP0091 NEW)
set(CMAKE_POLICY_DEFAULT_CMP0091 NEW)
cmake_minimum_required(VERSION 3.9)

project(AnimeSuperTool)


if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build" FORCE)
endif()

cmake_host_system_information(RESULT OS QUERY OS_NAME)


# find FFmpeg
if(${OS} MATCHES "Windows")
    set(FFMPEG_ROOT "C:/Libs/ffmpeg")
    set(FFMPEG_INCLUDE_DIR "${FFMPEG_ROOT}/include")
    set(FFMPEG_LIBRARIES_DIR "${FFMPEG_ROOT}/lib")
elseif(${OS} MATCHES "Linux")
    set(FFMPEG_LIBRARIES_DIR "/usr/lib/x86_64-linux-gnu")
    set(FFMPEG_INCLUDE_DIR "/usr/include/x86_64-linux-gnu")
endif()
if(NOT EXISTS "${FFMPEG_INCLUDE_DIR}/libavcodec/avcodec.h")
    message(FATAL_ERROR "FFmpeg not found! Please download FFmpeg from https://ffmpeg.org/download.html and set FFMPEG_ROOT to the FFmpeg installation directory.")
endif()
set(FFMPEG_LIBRARIES avcodec avdevice avfilter avformat avutil postproc swresample swscale)

find_package(Threads)
find_package(OpenMP)

# find vulkan
if(${OS} MATCHES "Windows")
    set(ENV{VULKAN_SDK} "C:/Libs/vulkan")
endif()
find_package(Vulkan REQUIRED)

# find boost
if(${OS} MATCHES "Windows")
    set(Boost_DIR "C:/Libs/Boost")
endif()
find_package(Boost REQUIRED COMPONENTS filesystem)

if(OPENMP_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

# enable global link time optimization
cmake_policy(SET CMP0069 NEW)
set(CMAKE_POLICY_DEFAULT_CMP0069 NEW)
include(CheckIPOSupported)
check_ipo_supported(RESULT ipo_supported OUTPUT ipo_supported_output)
if(ipo_supported)
    if (CMAKE_BUILD_TYPE STREQUAL "Release")
        set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
        message(STATUS "IPO is supported, using LTO for release build")
    else()
        message(STATUS "IPO is supported, it will be used for release build")
    endif()
else()
    message(WARNING "IPO is not supported: ${ipo_supported_output}")
endif()

# build ncnn library
if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/src/3rdmodules/ncnn/CMakeLists.txt")
    message(FATAL_ERROR "The submodules were not downloaded! Please update submodules with \"git submodule update --init --recursive\" and try again.")
endif()

option(NCNN_INSTALL_SDK "" OFF)
option(NCNN_PIXEL_ROTATE "" OFF)
option(NCNN_PIXEL_AFFINE "" OFF)
option(NCNN_PIXEL_DRAWING "" OFF)
option(NCNN_VULKAN "" ON)
option(NCNN_VULKAN_ONLINE_SPIRV "" ON)
option(NCNN_BUILD_BENCHMARK "" OFF)
option(NCNN_BUILD_TESTS "" OFF)
option(NCNN_BUILD_TOOLS "" OFF)
option(NCNN_BUILD_EXAMPLES "" OFF)
option(NCNN_DISABLE_RTTI "" ON)
option(NCNN_DISABLE_EXCEPTION "" ON)
option(NCNN_INT8 "" OFF)

option(WITH_LAYER_absval "" OFF)
option(WITH_LAYER_argmax "" OFF)
option(WITH_LAYER_batchnorm "" OFF)
option(WITH_LAYER_bias "" OFF)
option(WITH_LAYER_bnll "" OFF)
option(WITH_LAYER_concat "" ON)
option(WITH_LAYER_convolution "" ON)
option(WITH_LAYER_crop "" ON)
option(WITH_LAYER_deconvolution "" ON)
option(WITH_LAYER_dropout "" OFF)
option(WITH_LAYER_eltwise "" ON)
option(WITH_LAYER_elu "" OFF)
option(WITH_LAYER_embed "" OFF)
option(WITH_LAYER_exp "" OFF)
option(WITH_LAYER_flatten "" ON)
option(WITH_LAYER_innerproduct "" ON)
option(WITH_LAYER_input "" ON)
option(WITH_LAYER_log "" OFF)
option(WITH_LAYER_lrn "" OFF)
option(WITH_LAYER_memorydata "" OFF)
option(WITH_LAYER_mvn "" OFF)
option(WITH_LAYER_pooling "" ON)
option(WITH_LAYER_power "" OFF)
option(WITH_LAYER_prelu "" ON)
option(WITH_LAYER_proposal "" OFF)
option(WITH_LAYER_reduction "" ON)
option(WITH_LAYER_relu "" ON)
option(WITH_LAYER_reshape "" OFF)
option(WITH_LAYER_roipooling "" OFF)
option(WITH_LAYER_scale "" ON)
option(WITH_LAYER_sigmoid "" ON)
option(WITH_LAYER_slice "" ON)
option(WITH_LAYER_softmax "" OFF)
option(WITH_LAYER_split "" ON)
option(WITH_LAYER_spp "" OFF)
option(WITH_LAYER_tanh "" OFF)
option(WITH_LAYER_threshold "" OFF)
option(WITH_LAYER_tile "" OFF)
option(WITH_LAYER_rnn "" OFF)
option(WITH_LAYER_lstm "" OFF)
option(WITH_LAYER_binaryop "" ON)
option(WITH_LAYER_unaryop "" ON)
option(WITH_LAYER_convolutiondepthwise "" OFF)
option(WITH_LAYER_padding "" ON)
option(WITH_LAYER_squeeze "" OFF)
option(WITH_LAYER_expanddims "" OFF)
option(WITH_LAYER_normalize "" OFF)
option(WITH_LAYER_permute "" OFF)
option(WITH_LAYER_priorbox "" OFF)
option(WITH_LAYER_detectionoutput "" OFF)
option(WITH_LAYER_interp "" ON)
option(WITH_LAYER_deconvolutiondepthwise "" OFF)
option(WITH_LAYER_shufflechannel "" OFF)
option(WITH_LAYER_instancenorm "" OFF)
option(WITH_LAYER_clip "" ON)
option(WITH_LAYER_reorg "" OFF)
option(WITH_LAYER_yolodetectionoutput "" OFF)
option(WITH_LAYER_quantize "" OFF)
option(WITH_LAYER_dequantize "" OFF)
option(WITH_LAYER_yolov3detectionoutput "" OFF)
option(WITH_LAYER_psroipooling "" OFF)
option(WITH_LAYER_roialign "" OFF)
option(WITH_LAYER_packing "" ON)
option(WITH_LAYER_requantize "" OFF)
option(WITH_LAYER_cast "" ON)
option(WITH_LAYER_hardsigmoid "" OFF)
option(WITH_LAYER_selu "" OFF)
option(WITH_LAYER_hardswish "" OFF)
option(WITH_LAYER_noop "" OFF)
option(WITH_LAYER_pixelshuffle "" ON)
option(WITH_LAYER_deepcopy "" OFF)
option(WITH_LAYER_mish "" OFF)
option(WITH_LAYER_statisticspooling "" OFF)
option(WITH_LAYER_swish "" OFF)
option(WITH_LAYER_gemm "" OFF)
option(WITH_LAYER_groupnorm "" OFF)
option(WITH_LAYER_layernorm "" OFF)
option(WITH_LAYER_softplus "" OFF)
option(WITH_LAYER_gru "" OFF)
option(WITH_LAYER_multiheadattention "" OFF)
option(WITH_LAYER_gelu "" OFF)
option(WITH_LAYER_convolution1d "" OFF)
option(WITH_LAYER_pooling1d "" OFF)
option(WITH_LAYER_convolutiondepthwise1d "" OFF)
option(WITH_LAYER_convolution3d "" OFF)
option(WITH_LAYER_convolutiondepthwise3d "" OFF)
option(WITH_LAYER_pooling3d "" OFF)
option(WITH_LAYER_matmul "" OFF)
option(WITH_LAYER_deconvolution1d "" OFF)
option(WITH_LAYER_deconvolutiondepthwise1d "" OFF)
option(WITH_LAYER_deconvolution3d "" OFF)
option(WITH_LAYER_deconvolutiondepthwise3d "" OFF)
option(WITH_LAYER_einsum "" OFF)
option(WITH_LAYER_deformableconv2d "" OFF)
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/3rdmodules/ncnn)

macro(add_shader SHADER_SRC_DIR)

    file(GLOB_RECURSE SHADER_SRCS ${SHADER_SRC_DIR}/*.comp)

    foreach(SHADER_SRC ${SHADER_SRCS})
        get_filename_component(SHADER_SRC_NAME_WE ${SHADER_SRC} NAME_WE)
        set(SHADER_COMP_HEADER ${CMAKE_CURRENT_BINARY_DIR}/shaders/${SHADER_SRC_NAME_WE}.comp.hex.h)

        add_custom_command(
            OUTPUT ${SHADER_COMP_HEADER}
            COMMAND ${CMAKE_COMMAND} -DSHADER_SRC=${SHADER_SRC} -DSHADER_COMP_HEADER=${SHADER_COMP_HEADER} -P "${CMAKE_CURRENT_SOURCE_DIR}/src/generate_shader_comp_header.cmake"
            DEPENDS ${SHADER_SRC}
            COMMENT "Preprocessing shader source ${SHADER_SRC_NAME_WE}.comp"
            VERBATIM
        )
        
        set_source_files_properties(${SHADER_COMP_HEADER} PROPERTIES GENERATED TRUE)
        list(APPEND SHADER_SPV_HEX_FILES ${SHADER_COMP_HEADER})
    endforeach()
endmacro()
add_shader(${CMAKE_CURRENT_SOURCE_DIR}/src/ifrnet/shaders)
add_shader(${CMAKE_CURRENT_SOURCE_DIR}/src/realcugan/shaders)

add_executable(animetool src/main.cpp
                         src/realcugan/realcugan.cpp
                         src/ifrnet/ifrnet.cpp
                         src/ifrnet/warp.cpp
                         src/videoutils/common.cpp
                         src/videoutils/videoreader.cpp
                         src/videoutils/videowriter.cpp
)
set_property(TARGET animetool PROPERTY CXX_STANDARD 11)

add_custom_target(generate-spirv DEPENDS ${SHADER_SPV_HEX_FILES})
add_dependencies(animetool generate-spirv)

target_include_directories(animetool PRIVATE 
                            ${FFMPEG_INCLUDE_DIR} 
                            ${Vulkan_INCLUDE_DIR}
                            ${Boost_INCLUDE_DIRS}
                            ${CMAKE_CURRENT_SOURCE_DIR}/src
                            ${CMAKE_CURRENT_BINARY_DIR}/shaders
)

target_link_directories(animetool PRIVATE ${FFMPEG_LIBRARIES_DIR})

target_link_libraries(animetool ncnn ${Vulkan_LIBRARY} ${FFMPEG_LIBRARIES} ${Boost_LIBRARIES})
